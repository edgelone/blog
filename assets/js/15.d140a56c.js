(window.webpackJsonp=window.webpackJsonp||[]).push([[15],{503:function(e,n,s){"use strict";s.r(n);var t=s(4),a=Object(t.a)({},(function(){var e=this,n=e.$createElement,s=e._self._c||n;return s("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[s("h1",{attrs:{id:"精通redis-三"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#精通redis-三"}},[e._v("#")]),e._v(" 精通redis(三)")]),e._v(" "),s("h2",{attrs:{id:"redis中的list"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#redis中的list"}},[e._v("#")]),e._v(" redis中的list")]),e._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[s("span",{pre:!0,attrs:{class:"token number"}},[e._v("127.0")]),e._v(".0.1:637"),s("span",{pre:!0,attrs:{class:"token operator"}},[s("span",{pre:!0,attrs:{class:"token file-descriptor important"}},[e._v("9")]),e._v(">")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v("help")]),e._v(" @list\n\n  BLPOP key "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),e._v("key "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("..")]),e._v("."),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("timeout")]),e._v("\n  summary: Remove and get the first element "),s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("in")]),e._v(" a list, or block "),s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("until")]),e._v(" one is available\n  since: "),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("2.0")]),e._v(".0\n\n  BRPOP key "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),e._v("key "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("..")]),e._v("."),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("timeout")]),e._v("\n  summary: Remove and get the last element "),s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("in")]),e._v(" a list, or block "),s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("until")]),e._v(" one is available\n  since: "),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("2.0")]),e._v(".0\n\n  BRPOPLPUSH "),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v("source")]),e._v(" destination "),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("timeout")]),e._v("\n  summary: Pop a value from a list, push it to another list and "),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v("return")]),e._v(" it"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v(" or block "),s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("until")]),e._v(" one is available\n  since: "),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("2.2")]),e._v(".0\n\n  LINDEX key index\n  summary: Get an element from a list by its index\n  since: "),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("1.0")]),e._v(".0\n\n  LINSERT key BEFORE"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("|")]),e._v("AFTER pivot value\n  summary: Insert an element before or after another element "),s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("in")]),e._v(" a list\n  since: "),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("2.2")]),e._v(".0\n\n  LLEN key\n  summary: Get the length of a list\n  since: "),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("1.0")]),e._v(".0\n\n  LPOP key\n  summary: Remove and get the first element "),s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("in")]),e._v(" a list\n  since: "),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("1.0")]),e._v(".0\n\n  LPUSH key value "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),e._v("value "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("..")]),e._v("."),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),e._v("\n  summary: Prepend one or multiple values to a list\n  since: "),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("1.0")]),e._v(".0\n\n  LPUSHX key value\n  summary: Prepend a value to a list, only "),s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("if")]),e._v(" the list exists\n  since: "),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("2.2")]),e._v(".0\n\n  LRANGE key start stop\n  summary: Get a range of elements from a list\n  since: "),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("1.0")]),e._v(".0\n\n  LREM key count value\n  summary: Remove elements from a list\n  since: "),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("1.0")]),e._v(".0\n\n  LSET key index value\n  summary: Set the value of an element "),s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("in")]),e._v(" a list by its index\n  since: "),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("1.0")]),e._v(".0\n\n  LTRIM key start stop\n  summary: Trim a list to the specified range\n  since: "),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("1.0")]),e._v(".0\n\n  RPOP key\n  summary: Remove and get the last element "),s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("in")]),e._v(" a list\n  since: "),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("1.0")]),e._v(".0\n\n  RPOPLPUSH "),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v("source")]),e._v(" destination\n  summary: Remove the last element "),s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("in")]),e._v(" a list, prepend it to another list and "),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v("return")]),e._v(" it\n  since: "),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("1.2")]),e._v(".0\n\n  RPUSH key value "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),e._v("value "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("..")]),e._v("."),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),e._v("\n  summary: Append one or multiple values to a list\n  since: "),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("1.0")]),e._v(".0\n\n  RPUSHX key value\n  summary: Append a value to a list, only "),s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("if")]),e._v(" the list exists\n  since: "),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("2.2")]),e._v(".0\n\n\n")])])]),s("ul",[s("li",[e._v("同向命令push和pop为栈")]),e._v(" "),s("li",[e._v("反向命令push和pop为队列")]),e._v(" "),s("li",[e._v("下标操作   数组")]),e._v(" "),s("li",[e._v("阻塞 单播队列 FIFO")])]),e._v(" "),s("h3",{attrs:{id:"lrange"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#lrange"}},[e._v("#")]),e._v(" lrange")]),e._v(" "),s("ul",[s("li",[e._v("正负索引")])]),e._v(" "),s("h3",{attrs:{id:"linsert"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#linsert"}},[e._v("#")]),e._v(" linsert")]),e._v(" "),s("p",[e._v("只能在第一个目标元素前面插入")]),e._v(" "),s("h3",{attrs:{id:"ltrim"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#ltrim"}},[e._v("#")]),e._v(" ltrim")]),e._v(" "),s("p",[e._v("删除指定两端外的元素")]),e._v(" "),s("h2",{attrs:{id:"哈希"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#哈希"}},[e._v("#")]),e._v(" 哈希")]),e._v(" "),s("ul",[s("li",[e._v("hincr")])]),e._v(" "),s("h2",{attrs:{id:"set"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#set"}},[e._v("#")]),e._v(" set")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("127.0.0.1:6379> help @set\n\nSADD key member [member ...]\nsummary: Add one or more members to a set\nsince: 1.0.0\n\nSCARD key\nsummary: Get the number of members in a set\nsince: 1.0.0\n\nSDIFF key [key ...]\nsummary: Subtract multiple sets\nsince: 1.0.0\n\nSDIFFSTORE destination key [key ...]\nsummary: Subtract multiple sets and store the resulting set in a key\nsince: 1.0.0\n\nSINTER key [key ...]\nsummary: Intersect multiple sets\nsince: 1.0.0\n\nSINTERSTORE destination key [key ...]\nsummary: Intersect multiple sets and store the resulting set in a key\nsince: 1.0.0\n\nSISMEMBER key member\nsummary: Determine if a given value is a member of a set\nsince: 1.0.0\n\nSMEMBERS key\nsummary: Get all the members in a set\nsince: 1.0.0\n\nSMOVE source destination member\nsummary: Move a member from one set to another\nsince: 1.0.0\n\nSPOP key [count]\nsummary: Remove and return one or multiple random members from a set\nsince: 1.0.0\n\nSRANDMEMBER key [count]\nsummary: Get one or multiple random members from a set\nsince: 1.0.0\n\nSREM key member [member ...]\nsummary: Remove one or more members from a set\nsince: 1.0.0\n\nSSCAN key cursor [MATCH pattern] [COUNT count]\nsummary: Incrementally iterate Set elements\nsince: 2.8.0\n\nSUNION key [key ...]\nsummary: Add multiple sets\nsince: 1.0.0\n\nSUNIONSTORE destination key [key ...]\nsummary: Add multiple sets and store the resulting set in a key\nsince: 1.0.0\n")])])]),s("h2",{attrs:{id:"sorted-set"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#sorted-set"}},[e._v("#")]),e._v(" sorted_set")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("127.0.0.1:6379> help @sorted_set\n\n  BZPOPMAX key [key ...] timeout\n  summary: Remove and return the member with the highest score from one or more sorted sets, or block until one is available\n  since: 5.0.0\n\n  BZPOPMIN key [key ...] timeout\n  summary: Remove and return the member with the lowest score from one or more sorted sets, or block until one is available\n  since: 5.0.0\n\n  ZADD key [NX|XX] [CH] [INCR] score member [score member ...]\n  summary: Add one or more members to a sorted set, or update its score if it already exists\n  since: 1.2.0\n\n  ZCARD key\n  summary: Get the number of members in a sorted set\n  since: 1.2.0\n\n  ZCOUNT key min max\n  summary: Count the members in a sorted set with scores within the given values\n  since: 2.0.0\n\n  ZINCRBY key increment member\n  summary: Increment the score of a member in a sorted set\n  since: 1.2.0\n\n  ZINTERSTORE destination numkeys key [key ...] [WEIGHTS weight] [AGGREGATE SUM|MIN|MAX]\n  summary: Intersect multiple sorted sets and store the resulting sorted set in a new key\n  since: 2.0.0\n\n  ZLEXCOUNT key min max\n  summary: Count the number of members in a sorted set between a given lexicographical range\n  since: 2.8.9\n\n  ZPOPMAX key [count]\n  summary: Remove and return members with the highest scores in a sorted set\n  since: 5.0.0\n\n  ZPOPMIN key [count]\n  summary: Remove and return members with the lowest scores in a sorted set\n  since: 5.0.0\n\n  ZRANGE key start stop [WITHSCORES]\n  summary: Return a range of members in a sorted set, by index\n  since: 1.2.0\n\n  ZRANGEBYLEX key min max [LIMIT offset count]\n  summary: Return a range of members in a sorted set, by lexicographical range\n  since: 2.8.9\n\n  ZRANGEBYSCORE key min max [WITHSCORES] [LIMIT offset count]\n  summary: Return a range of members in a sorted set, by score\n  since: 1.0.5\n\n  ZRANK key member\n  summary: Determine the index of a member in a sorted set\n  since: 2.0.0\n\n  ZREM key member [member ...]\n  summary: Remove one or more members from a sorted set\n  since: 1.2.0\n\n  ZREMRANGEBYLEX key min max\n  summary: Remove all members in a sorted set between the given lexicographical range\n  since: 2.8.9\n\n  ZREMRANGEBYRANK key start stop\n  summary: Remove all members in a sorted set within the given indexes\n  since: 2.0.0\n\n  ZREMRANGEBYSCORE key min max\n  summary: Remove all members in a sorted set within the given scores\n  since: 1.2.0\n\n  ZREVRANGE key start stop [WITHSCORES]\n  summary: Return a range of members in a sorted set, by index, with scores ordered from high to low\n  since: 1.2.0\n\n  ZREVRANGEBYLEX key max min [LIMIT offset count]\n  summary: Return a range of members in a sorted set, by lexicographical range, ordered from higher to lower strings.\n  since: 2.8.9\n\n  ZREVRANGEBYSCORE key max min [WITHSCORES] [LIMIT offset count]\n  summary: Return a range of members in a sorted set, by score, with scores ordered from high to low\n  since: 2.2.0\n\n  ZREVRANK key member\n  summary: Determine the index of a member in a sorted set, with scores ordered from high to low\n  since: 2.0.0\n\n  ZSCAN key cursor [MATCH pattern] [COUNT count]\n  summary: Incrementally iterate sorted sets elements and associated scores\n  since: 2.8.0\n\n  ZSCORE key member\n  summary: Get the score associated with the given member in a sorted set\n  since: 1.2.0\n\n  ZUNIONSTORE destination numkeys key [key ...] [WEIGHTS weight] [AGGREGATE SUM|MIN|MAX]\n  summary: Add multiple sorted sets and store the resulting sorted set in a new key\n  since: 2.0.0\n\n")])])]),s("ul",[s("li",[e._v("物理内存 左小右大")])])])}),[],!1,null,null,null);n.default=a.exports}}]);